# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Copyright (c) 2015 Mozilla Corporation
#
# Contributors:
# Aaron Meihm ameihm@mozilla.com

import hashlib
import sys
import unittest

class message(object):
    MSG_VERSION_1 = 1
    MSG_VERSION_2 = 2

    class version_handler(object):
        def __init__(self, ver, validate, calcid):
            self.version = ver
            self.validate = validate
            self.calculate_id = calcid

    def __init__(self):
        self.registration = ['vulnerability']
        self.priority = 20
        self.handler_v1 = self.version_handler(self.MSG_VERSION_1, self.validate_v1,
                self.calculate_id_v1)
        self.handler_v2 = self.version_handler(self.MSG_VERSION_2, self.validate_v2,
                self.calculate_id_v2)

    def get_handler(self, message):
        if 'version' not in message:
            return self.handler_v1
        if int(message['version']) == self.MSG_VERSION_2:
            return self.handler_v2
        return None

    def validate_v1(self, message):
        for k in ['utctimestamp', 'description', 'vuln', 'asset',
                  'sourcename']:
            if k not in message.keys():
                return False
        for k in ['assetid', 'ipv4address', 'hostname', 'macaddress']:
            if k not in message['asset'].keys():
                return False
        for k in ['status', 'vulnid', 'title', 'discovery_time', 'age_days',
                  'known_malware', 'known_exploits', 'cvss', 'cves']:
            if k not in message['vuln'].keys():
                return False
        return True

    def validate_v2(self, message):
        for k in ['utctimestamp', 'description', 'asset', 'sourcename', 'zone']:
            if k not in message.keys():
                return False
        for k in ['hostname', 'ipaddress']:
            if k not in message['asset'].keys():
                return False
        if message['zone'] == '' or message['sourcename'] == '' or \
                message['asset']['ipaddress'] == '' or message['asset']['hostname'] == '':
                return False
        return True

    def calculate_id_v1(self, message):
        s = '{0}|{1}|{2}'.format(message['asset']['assetid'],
            message['vuln']['vulnid'], message['sourcename'])
        return hashlib.md5(s).hexdigest()

    def calculate_id_v2(self, message):
        s = '{0}|{1}|{2}|{3}'.format(message['zone'],
                message['sourcename'], message['asset']['hostname'],
                message['asset']['ipaddress'])
        return hashlib.md5(s).hexdigest()

    def onMessage(self, message, metadata):
        if metadata['doc_type'] != 'vulnerability':
            return (message, metadata)
        handler = self.get_handler(message)
        if handler == None:
            return (None, None)
        if not handler.validate(message):
            sys.stderr.write('error: invalid format for vulnerability {0}'.format(message))
            return (None, None)
        metadata['id'] = handler.calculate_id(message)
        metadata['doc_type'] = 'vulnerability_state'
        metadata['index'] = 'vulnerabilities'
        return (message, metadata)

class MessageTestFunctionsV1(unittest.TestCase):
    def setUp(self):
        self.msgobj = message()

        self.msg = {}
        self.msg['description'] = 'system vulnerability management automation'
        self.msg['utctimestamp'] = '2015-01-21T15:33:51.136378+00:00'
        self.msg['sourcename'] = 'development'
        self.msg['asset'] = {}
        self.msg['asset']['assetid'] = 23
        self.msg['asset']['ipv4address'] = '1.2.3.4'
        self.msg['asset']['macaddress'] = ''
        self.msg['asset']['hostname'] = 'git.mozilla.com'
        self.msg['vuln'] = {}
        self.msg['vuln']['status'] = 'new'
        self.msg['vuln']['vulnid'] = 'nexpose:43883'
        self.msg['vuln']['title'] = 'RHSA-2013:1475: postgresql and postgresql84 security update'
        self.msg['vuln']['discovery_time'] = 1421845863
        self.msg['vuln']['age_days'] = 32.7
        self.msg['vuln']['known_malware'] = False
        self.msg['vuln']['known_exploits'] = False
        self.msg['vuln']['cvss'] = 8.5
        self.msg['vuln']['cves'] = ['CVE-2013-022', 'CVE-2013-1900']

    def test_onMessage(self):
        metadata = {}
        metadata['doc_type'] = 'vulnerability'
        (retmessage, retmeta) = self.msgobj.onMessage(self.msg, metadata)
        self.assertIsNotNone(retmessage)
        self.assertIsNotNone(retmeta)
        self.assertEquals(retmeta['id'], '793fd2bebd558dd8e358d8e80dd8cdc2')

    def test_calculate_id(self):
        self.assertEquals(self.msgobj.get_handler(self.msg).calculate_id(self.msg), '793fd2bebd558dd8e358d8e80dd8cdc2')

    def test_validate_correct(self):
        self.assertTrue(self.msgobj.get_handler(self.msg).validate(self.msg))

    def test_validate_incorrect(self):
        del self.msg['utctimestamp']
        self.assertFalse(self.msgobj.get_handler(self.msg).validate(self.msg))

    def test_validate_incorrect_vuln(self):
        del self.msg['vuln']['age_days']
        self.assertFalse(self.msgobj.get_handler(self.msg).validate(self.msg))

class MessageTestFunctionsV2(unittest.TestCase):
    def setUp(self):
        self.msgobj = message()

        self.msg = {}
        self.msg['scan_start'] = '2016-11-21T19:18:28+00:00'
        self.msg['scan_end'] = '2016-11-21T19:20:31+00:00'
        self.msg['description'] = 'scanapi runscan mozdef emitter'
        self.msg['utctimestamp'] = '2016-11-21T22:18:31.399746+00:00'
        self.msg['zone'] = 'scl3'
        self.msg['sourcename'] = 'scanapi'
        self.msg['version'] = 2
        self.msg['vulnerabilities'] = [
                {
                    'name': 'RHEL 6 : kernel (RHSA-2016:2006)',
                    'vulnerable_packages': [
                        'kernel-2.6.32-642.4.2.el6',
                        'kernel-devel-2.6.32-642.4.2.el6',
                        'kernel-firmware-2.6.32-642.4.2.el6',
                        'kernel-headers-2.6.32-642.4.2.el6'
                    ],
                    'output': '\nRemote package installed : kernel-2.6.32-642.4.2.el6\n' + \
                            'Should be                : kernel-2.6.32-642.6.1.el6\n\n' + \
                            'Remote package installed : kernel-devel-2.6.32-642.4.2.el6\n' + \
                            'Should be                : kernel-devel-2.6.32-642.6.1.el6\n' + \
                            '\nRemote package installed : kernel-firmware-2.6.32-642.4.2.el6\n' + \
                            'Should be                : kernel-firmware-2.6.32-642.6.1.el6\n\n' + \
                            'Remote package installed : kernel-headers-2.6.32-642.4.2.el6\n' + \
                            'Should be                : kernel-headers-2.6.32-642.6.1.el6\n\n',
                    'cve': 'CVE-2016-4470',
                    'cvss': 7.2,
                    'risk': 'high'
                    }
                ]
        self.msg['asset'] = {
                'os': 'Linux Kernel 2.6.32-642.4.2.el6.x86_64 on Red Hat Enterprise Linux Server release 6.8 (Santiago)',
                'hostname': 'hostname.mozilla.com',
                'ipaddress': '1.2.3.4'
                }

    def test_onMessage(self):
        metadata = {}
        metadata['doc_type'] = 'vulnerability'
        (retmessage, retmeta) = self.msgobj.onMessage(self.msg, metadata)
        self.assertIsNotNone(retmessage)
        self.assertIsNotNone(retmeta)
        self.assertEquals(retmeta['id'], 'dc057651c89b7064ae9d8b140ab12d40')

if __name__ == '__main__':
    unittest.main(verbosity=2)
